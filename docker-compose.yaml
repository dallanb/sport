version: "3.2"

services:
  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - 8080:8080
    networks:
      - app-net
  sport:
    container_name: sport
    build:
      context: .
      dockerfile: ./build/Dockerfile
    restart: on-failure
    volumes:
      - ./migrations:/home/app/migrations
      - ./bin:/home/app/bin
      - ./tests:/home/app/tests
      - ./seeds:/home/app/seeds
      - ./src:/home/app/src
      - ./logs:/home/app/logs
      - ./statics:/home/app/statics
      - ./manage.py:/home/app/manage.py
      - ./setup.py:/home/app/setup.py
    env_file:
      - env/.env.sport
    healthcheck:
      test: curl --fail -s sport:5000/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 20006:5000
    depends_on:
      - sport_db
      - sport_kafka
      - sport_zookeeper
    networks:
      - app-net
  sport_db:
    container_name: sport_db
    image: postgres:9.6
    volumes:
      - db_data:/var/lib/postgresql/data/
    env_file:
      - env/.env.sport_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sport" ]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
  sport_kafka:
    container_name: sport_kafka
    image: wurstmeister/kafka:latest
    restart: on-failure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - env/.env.sport_kafka
    depends_on:
      - sport_zookeeper
    networks:
      - app-net
  sport_zookeeper:
    container_name: sport_zookeeper
    image: wurstmeister/zookeeper:latest
    restart: on-failure
    env_file:
      - env/.env.sport_zookeeper
    networks:
      - app-net
volumes:
  db_data:
networks:
  app-net:
    driver: bridge